package handler

import (
	"GiftBuyer/app"
	. "GiftBuyer/internal/keyboard"
	"fmt"
	. "github.com/mymmrac/telego"
	th "github.com/mymmrac/telego/telegohandler"
)

func HandleCallback(storage *app.StateStorage) (th.Handler, th.Predicate) {
	return func(ctx *th.Context, update Update) error {
		if update.CallbackQuery == nil || update.CallbackQuery.Message == nil {
			return nil
		}

		data := update.CallbackQuery.Data
		switch data {
		case "back_to_start":
			_ = ctx.Bot().AnswerCallbackQuery(ctx, &AnswerCallbackQueryParams{CallbackQueryID: update.CallbackQuery.ID})

			_, err := ctx.Bot().EditMessageText(ctx, &EditMessageTextParams{
				ChatID:    update.CallbackQuery.Message.GetChat().ChatID(),
				MessageID: update.CallbackQuery.Message.GetMessageID(),
				Text: "<b>–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —É–¥–æ–±–Ω—ã–π –±–æ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ Telegram</b>\n\n" +
					"–° –Ω–∏–º —Ç—ã –º–æ–∂–µ—à—å –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞—Ç—å –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å —Å–µ–±–µ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω.",
				ReplyMarkup: StartKeyboard(),
				ParseMode:   "HTML",
			})

			// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
			storage.ClearState(update.CallbackQuery.From.ID)

			if err != nil {
				return err
			}

		case "profile":
			_ = ctx.Bot().AnswerCallbackQuery(ctx, &AnswerCallbackQueryParams{CallbackQueryID: update.CallbackQuery.ID})

			_, err := ctx.Bot().EditMessageText(ctx, &EditMessageTextParams{
				ChatID:    update.CallbackQuery.Message.GetChat().ChatID(),
				MessageID: update.CallbackQuery.Message.GetMessageID(),
				Text: "<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n" +
					fmt.Sprintf("<b>‚≠êÔ∏è –ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥ –≤ –±–æ—Ç–µ:</b> %d\n\n", 0) +
					fmt.Sprintf("<b>‚≠êÔ∏è –ü–æ–¥–∞—Ä–∫–æ–≤ –∫—É–ø–ª–µ–Ω–æ:</b> %d –Ω–∞ —Å—É–º–º—É %d ‚≠êÔ∏è", 0, 0),
				ReplyMarkup: ProfileKeyboard(),
				ParseMode:   "HTML",
			})

			if err != nil {
				return err
			}
		}

		return nil
	}, th.AnyCallbackQueryWithMessage()
}
